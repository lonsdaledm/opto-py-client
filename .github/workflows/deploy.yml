name: Deploy to production

on: 
  workflow_dispatch:
    inputs:
      check:
        description: 'Do you want to deploy latest?'     
        required: true
        default: 'yes'

jobs:
  buildAnddeployProd:
    runs-on: ubuntu-latest
    env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    steps:
    - name: set environment variables
      id: env
      run: |
        echo ::set-output name=aws_account_id::$(echo "354091474362")
        echo ::set-output name=repo::$(echo "10thplanet")
        echo ::set-output name=tag::$(echo "latest")
        echo ::set-output name=task_definition_name::10p
        echo ::set-output name=container_name::10thPlanet
        echo ::set-output name=service_name::python-10p
        echo ::set-output name=cluster_name::python-10p
    - name: Checkout
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: build the docker and push to prod ecr
      run: |
        aws ecr get-login-password \
          --region us-east-1 | docker login \
          --username AWS \
          --password-stdin "${{ steps.env.outputs.aws_account_id }}.dkr.ecr.us-east-1.amazonaws.com"
        docker build . --tag "${{ steps.env.outputs.aws_account_id }}.dkr.ecr.us-east-1.amazonaws.com/${{ steps.env.outputs.repo }}:${{ steps.env.outputs.tag }}" --no-cache
        docker push "${{ steps.env.outputs.aws_account_id }}.dkr.ecr.us-east-1.amazonaws.com/${{ steps.env.outputs.repo }}:${{ steps.env.outputs.tag }}"
    - name: Deploy to prod
      run: |
        aws ecs update-service --cluster ${{ steps.env.outputs.cluster_name }} --service ${{ steps.env.outputs.service_name }} --force-new-deployment
    - name: Post to a Slack channel
      id: slack
      if: always()
      uses: slackapi/slack-github-action@v1.16.0
      with:
        channel-id: 'platform-alerts'
        payload: |
          {
            "text": "GitHub Action build result for ${{ github.event.repository.name }}: ${{ job.status }}",

            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "GitHub Action build result for **${{ github.event.repository.name }}**: ${{ job.status }}"
                }
              }
            ]
          }
